// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: modules/user/v1/public/user_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserProtoClient is the client API for UserProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserProtoClient interface {
	RegisterUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*TokenResponse, error)
	SearchUser(ctx context.Context, in *SearchParams, opts ...grpc.CallOption) (*SearchResponse, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*TokenResponse, error)
}

type userProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewUserProtoClient(cc grpc.ClientConnInterface) UserProtoClient {
	return &userProtoClient{cc}
}

func (c *userProtoClient) RegisterUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/user.v1.UserProto/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProtoClient) SearchUser(ctx context.Context, in *SearchParams, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/user.v1.UserProto/SearchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProtoClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/user.v1.UserProto/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserProtoServer is the server API for UserProto service.
// All implementations must embed UnimplementedUserProtoServer
// for forward compatibility
type UserProtoServer interface {
	RegisterUser(context.Context, *User) (*TokenResponse, error)
	SearchUser(context.Context, *SearchParams) (*SearchResponse, error)
	SignIn(context.Context, *SignInRequest) (*TokenResponse, error)
	mustEmbedUnimplementedUserProtoServer()
}

// UnimplementedUserProtoServer must be embedded to have forward compatible implementations.
type UnimplementedUserProtoServer struct {
}

func (UnimplementedUserProtoServer) RegisterUser(context.Context, *User) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedUserProtoServer) SearchUser(context.Context, *SearchParams) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedUserProtoServer) SignIn(context.Context, *SignInRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedUserProtoServer) mustEmbedUnimplementedUserProtoServer() {}

// UnsafeUserProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserProtoServer will
// result in compilation errors.
type UnsafeUserProtoServer interface {
	mustEmbedUnimplementedUserProtoServer()
}

func RegisterUserProtoServer(s grpc.ServiceRegistrar, srv UserProtoServer) {
	s.RegisterService(&UserProto_ServiceDesc, srv)
}

func _UserProto_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProtoServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.UserProto/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProtoServer).RegisterUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProto_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProtoServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.UserProto/SearchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProtoServer).SearchUser(ctx, req.(*SearchParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProto_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProtoServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.UserProto/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProtoServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserProto_ServiceDesc is the grpc.ServiceDesc for UserProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.UserProto",
	HandlerType: (*UserProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _UserProto_RegisterUser_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _UserProto_SearchUser_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _UserProto_SignIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modules/user/v1/public/user_service.proto",
}
